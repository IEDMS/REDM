library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
document()
library(learningcurves)
source('~/Documents/Analysis/analysis lib/old_code/extract_curriculum_data.r')
all.unit.files.2012 = all.unit.files("/Applications/Carnegie Learning/2012/")
all.unit.files.2012
all.section.skills.2012 = read.section.skills( all.unit.files.2012[1] )
for( i in 2:300 ){
all.section.skills.2012 = rbind( all.section.skills.2012, read.section.skills( all.unit.files.2012[i] ) )
}
dim(all.section.skills.2012)
all.section.skills.2012 = read.section.skills( all.unit.files.2012[1] )
dim(all.section.skills.2012)
all.section.skills.2012
for( i in 2:300 ){
all.section.skills.2012 = rbind( all.section.skills.2012, read.section.skills( all.unit.files.2012[i] ) )
}
i
all.section.skills.2012[1:5,]
foo = read.section.skills( all.unit.files.2012[i] )
foo
all.unit.files.2012[i]
all.unit.files.2012[i:i+10]
i
i:i+10
i:(i+10)
all.unit.files.2012[i:(i+10)]
all.unit.files.2012[i:300]
i+12
all.unit.files.2012[i+11]
all.unit.files.2012[i+12]
all.unit.files.2012[i+13]
for( i in 297:300 ) all.section.skills.2012 = rbind( all.section.skills.2012, read.section.skills( all.unit.files.2012[i]))
all.section.skills.2012[5900:5907]
all.section.skills.2012[5900:5907,]
write.csv( all.section.skills.2012, file="~/Desktop/all_section_skills_2012.csv")
document()
library(learningcurves)
document()
library(learningcurves)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
65796-1746
4917/(98.09/60)
(98.09/60)
2677/(98.09/60)
?boot
documents()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
document()
dev_mode()
library(learningcurves)
library("datashop", lib.loc="/Users/tnixon/R-dev")
connect.to.db("2010r2_analysis_db")
a1.toc = get.curriculum.toc("Algebra I")
names(a1.toc)
a1.toc$skill_id[ a1.toc$section_id == "CTA1_01-2"]
a1.toc[ a1.toc$section_id == "CTA1_01-2", ]
a1.toc[ a1.toc$section_id == "CTA1_01-2", ][7,]
sk = a1.toc[ a1.toc$section_id == "CTA1_01-2", ][7,]
sk.opps = get.skill.opps(sk)
default.connection
names(default.connection)
?attr
attributes(default.connection)
library(learningcurves)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library("datashop", lib.loc="/Users/tnixon/R-dev")
connect.to.db("2010r2_analysis_db")
attributes(default.connection)
a1.toc = get.curriculum.toc("Algebra I")
sk = a1.toc[7,]
sk
sk.opps = get.skill.opps(sk)
dim(sk.opps)
library(learningcurves)
sk.stats = lc.stats( sk.opps )
sk.stats
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
?boot
sk.se.boot = boot( sk.opps, function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, )
sk.se.boot = boot( sk.opps, function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 10 )
sk.se.boot
dim(sk.opps)
names(sk.se.boot)
sk.se.boot$t0
sk.se.boot$t
sk.stats$correct
sk.stats$p.correct
sk.se.boot$t0
?median
sk.se.boot$t
sk.stats$cutoff.msk
sk.se.boot = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 10 )
sk.se.boot$t
sk.se.boot$t[,1]
quantile( sk.se.boot$t[,1], 0.95 )
quantile( sk.se.boot$t[,1], c(0.05,0.95) )
mean(sk.se.boot$t[,1])
sd( sk.se.boot$t[,1] )
mean(sk.se.boot$t[,1]) + sd( sk.se.boot$t[,1] )
mean(sk.se.boot$t[,1]) + 2*sd( sk.se.boot$t[,1] )
?sd
sk.se.boot = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 1000 )
dim(sk.se.boot$t)
mean(sk.se.boot$t[,1]) + 2*sd( sk.se.boot$t[,1] )
mean(sk.se.boot$t[,1]) + sd( sk.se.boot$t[,1] )
quantile( sk.se.boot$t[,1], c(0.05,0.95) )
quantile( sk.se.boot$t[,1], c(0.025,0.975) )
?boot.ci
boot.ci( sk.se.boot )
?ci
boot.ci( sk.se.boot, type="basic" )
boot.ci( sk.se.boot, type="norm" )
dim(sk.se.boot$t1)
dim(sk.se.boot$t)
dim(sk.se.boot$t0)
length(sk.se.boot$t0)
min(2,length(sk.se.boot$t0))
1:min(2,length(sk.se.boot$t0))
quantile( sk.se.boot$t[,1], c(0.025,0.975) )
?apply
?quantile
apply( sk.se.boot$t, 1, mean )
apply( sk.se.boot$t, 2, mean )
apply( sk.se.boot$t, 2, quantile, probs=c(0.25,0.975) )
apply( sk.se.boot$t, 2, quantile, probs=c(0.025,0.975) )
ci=0.95
0.5*(1-ci)
0.5*(ci)
ci+0.5*(1-ci)
ci.tail = 0.5*(1-ci)
ci.tail
c( ci.tail, 1 - ci.tail )
boot
sk.stats
sk.stats = lc.stats( sk.opps )
sk.se.boot = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 1000 )
library(learningcurves)
sk.stats = lc.stats( sk.opps )
sk.stats
library(learningcurves)
sk.stats = lc.stats( sk.opps )
sk.stats
class(find.cutoff.msk)
typeof(find.cutoff.msk)
?is.function
is.function(find.cutoff.msk)
library(learningcurves)
document()
library(learningcurves)
?document
?roxygen2
document()
library(learningcurves)
document()
library(learningcurves)
document()
library(learningcurves)
library(learningcurves)
library(learningcurves)
document()
library(learningcurves)
document()
library(learningcurves)
document()
library(learningcurves)
document()
library(learningcurves)
document()
library(learningcurves)
?boot
?rsq
?boot.ci
sk.se.boot$t
dim(sk.se.boot$t)
boot.ci( sk.se.boot, type="perc", index=1 )
sk.stats$ci.bounds[,1]
sk.stats$ci.bounds[,2]
sk.stats$ci.bounds
boot.ci( sk.se.boot, type="bca", index=1 )
boot.ci( sk.se.boot, type="perc", index=1 )
boot.ci( sk.se.boot, type="perc" )
boot.ci( sk.se.boot, type="perc", index=1:ncol(sk.se.boot$t) )
boot.ci( sk.se.boot, type="perc", index=2 )
names(boot.ci( sk.se.boot, type="perc", index=2 ))
boot.ci( sk.se.boot, type="perc", index=2 )$t0
boot.ci( sk.se.boot, type="perc", index=2 )$percent
boot.ci( sk.se.boot, type="norm", index=2 )
boot.ci( sk.se.boot, type="basic", index=2 )
boot.ci( sk.se.boot, type="stud", index=2 )
boot.ci( sk.se.boot, type="stud", index=1 )
boot.ci( sk.se.boot, type="stud", index=1:2 )
boot.ci( sk.se.boot, type="perc", index=2 )
boot.ci( sk.se.boot, type="perc", index=2 )
boot.ci( sk.se.boot, type="perc", index=2 )
default.connection
sk.stats$ci.bounds
nrow(sk.opps)
sample.size = 500
mean( sk.opps[,1], na.rm=T)
sk.stats$p.correct
?vapply
p.correct.boot <- function(){
}
?sample
sample( nrow(sk.opps), sample.size)
p.correct.boot <- function(){
data = sk.opps[ sample(nrow(sk.opps), sample.size), ]
100*get.correct.from.opps(data)/get.total.from.opps(data)
}
p.correct.boot
p.correct.boot()
p.correct.boot()
p.correct.boot()
p.correct.boot()
sk.boot = replicate( 1000, p.correct.boot )
sk.boot[[1]]
sk.boot = replicate( 1000, p.correct.boot() )
dim(sk.boot)
?quantile
quantile( sk.boot[1,], c(0.025,0.975))
sk.boot.ci = apply( sk.boot, 1, quantile, probs=c(0.025,0.975) )
sk.boot.ci = apply( sk.boot, 1, quantile, probs=c(0.025,0.975), na.rm=T )
sk.boot.ci
sk.stats$ci.bounds
sample.size
?boot.ci
boot.ci( sk.se.boot, type="perc", index=1 )
quantile( sk.se.boot$t[,1], c(0.025,0.975))
boot.ci( sk.se.boot, type="perc", index=1 )$percent
boot.ci( sk.se.boot, type="perc", index=2 )$percent
quantile( sk.se.boot$t[,2], c(0.025,0.975))
?vapply
dim(sk.se.boot$t)
sapply( 1:16, function(i){ boot.ci( sk.se.boot, type="perc", index=i )$percent[4:5] } )
sk.stats$ci.bounds
apply( sk.se.boot$t, 2, quantile, probs=c( 0.025, 0.975 ), na.rm=T )
?boot.ci
library(learningcurves)
sk.stats = lc.stats( sk.opps )
sk.stats$ci.bounds
sk.se.boot
attributes(sk.se.boot)
sk.se.boot$statistic
sk.se.boot$t0
sk.se.boot$t
attributes(sk.se.boot)
sk.se.boot$$
sk.se.boot$R
attributes(summary(sk.se.boot))
sk.se.boot
dim(sk.se.boot)
dim(sk.se.boot$t)
?sd
apply( sk.se.boot$t, 1, sd )
apply( sk.se.boot$t, 2, sd )
sk.se.boot
attributes(sk.se.boot)
sk.se.boot$R
sqrt(sk.se.boot$R)
apply( sk.se.boot$t, 2, sd ) / sqrt(sk.se.boot$R)
sk.se.boot
apply( sk.se.boot$t, 2, sd )
document()
library(learningcurves)
sk.stats = lc.stats( sk.opps )
attributes(sk.stats)
sk.stats$ci.bounds
sk.stats$se
rm(sk.boot)
rm(sk.boot.ci)
rm(sk.se.boot)
rm(sample.size)
rm(ci,ci.tail)
sk.boot = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 999 )
sk.boot
sk.stats$se
apply( sk.boot$t, 2, sd )
document()
library(learningcurves)
sk.stats = lc.stats( sk.opps)
sk.stats$se
sk.boot = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 999 )
library(learningcurves)
sk.stats = lc.stats( sk.opps)
sk.stats
document()
library(learningcurves)
rm(sk.boot)
sk.stats = lc.stats( sk.opps)
sk.stats$se
sk.stats$ci.bounds
sk.stats$cutoff.msk
dim(sk.opps[,sk.stats$cutoff.msk])
sk.b = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 999 )
sum(sk.stats$cutoff.msk)
sapply( 1:16, function(i){ boot.ci( sk.b, conf=0.95, type="perc", index=i )$percent[4:5] } )
apply( sk.b$t, 2, sd )
sk.b = boot( sk.opps[,sk.stats$cutoff.msk], function(o,i){ 100*get.correct.from.opps(o[i,])/get.total.from.opps(o[i,])}, 999 )
apply( sk.b$t, 2, sd )
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
devmode()
dev_mode()
library(learningcurves)
dev_mode()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library(learningcurves)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library(learningcurves)
document()
document()
library(learningcurves)
document()
library(learningcurves)
document()
library(learningcurves)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library(learningcurves)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library("clidata", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
clidata()
load("../clidata/data/toc.RData")
load("../clidata/data/cta1_opps.RData")
sk = get.skill("CTA1_01-2","Entering a given-1",toc)
sk
sk.opps = get.skill.opps("CTA1_01-2","Entering a given-1", cta1.opps)
library(learningcurves)
sk.stats = lc.stats( sk.opps )
sk.stats
basic.learning.curve.plot( sk, sk.stats)
library(learningcurves)
basic.learning.curve.plot( sk, sk.stats)
library(learningcurves)
basic.learning.curve.plot( sk, sk.stats)
basic.learning.curve.plot( sk, sk.stats)
